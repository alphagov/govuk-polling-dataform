config {
    type: "assertion",
    description: "Asserts that src_bmg_all_waves has the expected columns in includes.constants.js array allSrcColumns",
    dependencies: ["src_bmg_all_waves"]
}

js {
    const { allSrcColumns } = require('/includes/constants');

    // 1. Map each column name string to a quoted string
    const quotedColumns = allSrcColumns.map(col => `'${col}'`);

    // 2. Join the quoted strings with commas
    const columnsJoined = quotedColumns.join(', ');

    // 3. Wrap the joined string in an ARRAY literal
    const expectedColumnsSqlArrayLiteral = `ARRAY<STRING>[${columnsJoined}]`;

}

-- This CTE uses the JS variable to create a list of expected columns
WITH expected_column_names AS (
    SELECT
        column_name
    FROM
        UNNEST(${expectedColumnsSqlArrayLiteral}) AS column_name
),

-- This CTE gets the actual columns from the main dataset
actual_column_names AS (
    SELECT
        column_name
    FROM 
        -- this has to be the origin govuk-polling.govuk_polling_response, not the project default "gds-bq-reporting"
        `govuk-polling.govuk_polling_responses.INFORMATION_SCHEMA.COLUMNS`
        /** `${dataform.projectConfig.defaultDatabase}.${dataform.projectConfig.defaultSchema}_${dataform.projectConfig.SUFFIX}.INFORMATION_SCHEMA.COLUMNS` **/
    WHERE 
    table_schema = "govuk_polling_responses" AND 
        table_name LIKE "src_bmg_wave%"

),

-- Find columns in the expected list that are missing from the actual table
missing_expected_columns AS (
    SELECT
        expected.column_name,
        'MISSING_IN_TABLE' AS discrepancy_type
    FROM
        expected_column_names AS expected
    LEFT JOIN
        actual_column_names AS actual
        ON expected.column_name = actual.column_name
    WHERE
        actual.column_name IS NULL
),

-- Find columns in the actual table that are not in the expected list
unexpected_actual_columns AS (
    SELECT
        actual.column_name,
        'UNEXPECTED_IN_TABLE' AS discrepancy_type
    FROM
        actual_column_names AS actual
    LEFT JOIN
        expected_column_names AS expected
        ON actual.column_name = expected.column_name
    WHERE
        expected.column_name IS NULL
        -- This is a haggard way to stop the wave_name variable created in src_bmg_all_waves.sqlx from triggering 
        -- AND actual.column_name != 'wave_name'
        AND actual.column_name not in ('wave_name','source_table','wave_number')
)

-- The assertion fails if this query returns any rows.
-- The results show exactly which columns are missing or unexpected.
SELECT
    column_name,
    discrepancy_type
FROM
    missing_expected_columns

UNION ALL

SELECT
    column_name,
    discrepancy_type
FROM
    unexpected_actual_columns

ORDER BY
    discrepancy_type,
    column_name