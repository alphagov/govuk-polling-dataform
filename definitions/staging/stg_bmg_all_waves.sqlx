config {
    type: "view",
    assertions: {
        uniqueKey: ["survey_response_id"],
        nonNull: ["survey_response_id", "survey_wave_id"],
        rowConditions: [
            "age_code IN ('1', '2', '3', '4', '5', '6', '7', '8')",
            "gender_code IN ('1', '2', '95', '98')",
            "ethnicity_code IN ('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '95', '98')",
            "qualification_code IN ('1', '2', '3', '4', '5', '6', '7', '8', '9')",
            "government_office_region_code IN ('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12')",
            "is_english_main_language_code IN ('1', '2', '98')"
        ]
    },
}
js {
  const {srcResponseColumns} = require('includes/constants');
  const {cleanAndCastColumn} = require('includes/utils');

  }

WITH bmg_all_waves_cleaned AS (
SELECT
  -- survey response data
  NULLIF(TRIM(CAST(REPLACE(wave_name, '_', ' ') AS STRING)), '') AS wave_name,
  TRIM(CAST(responseid AS STRING)) AS src_response_id,
  CAST(WEIGHT AS FLOAT64) AS weight,
  CAST(quartile_country AS INTEGER) AS imd_quartile_country,
  NULLIF(TRIM(CAST(gender AS STRING)), '') AS gender_code,
  NULLIF(TRIM(CAST(age AS STRING)), '') AS age_code,
  TRIM(CAST(qualification2020 AS STRING)) AS qualification_code,
  TRIM(CAST(gor_code AS STRING)) AS government_office_region_code,
  TRIM(CAST(ethnicity AS STRING)) AS ethnicity_code,
  (NULLIF(TRIM(CAST(lang AS STRING)), '')) AS is_english_main_language_code,

-- this calls the cleanAndCastColumn function on every member of SrCResponseColumns to generate 
-- the desired sql template 
  ${srcResponseColumns.map(cleanAndCastColumn).join(",\n  ")}

FROM ${ref("src_bmg_all_waves")}
)
SELECT
  -- surrogate keys
  TO_HEX(MD5(CONCAT(wave_name, '-', src_response_id))) AS survey_response_id,
  TO_HEX(MD5(wave_name)) AS survey_wave_id,
  -- survey response data
    *
FROM bmg_all_waves_cleaned
