config {
    type: "view",
    assertions: {
        uniqueKey: ["survey_response_id", "question_id", "src_question_response_column_name", "selection_value"],
        nonNull: ["survey_response_id", "question_id", "src_question_response_column_name", "selection_value"],
        rowConditions: []
    },
    dependencies: ["stg_bmg_all_waves"]
}
  -- This table will have duplicate rows for multi-select responses
  -- import retreive_column_names
js {
  const {automaticResponseColumns} = require('includes/retrieve_column_names');
  }

WITH
  unpivoted AS (
  SELECT
    survey_response_id,
    src_column_name,
    NULLIF(selection_value, '') AS selection_value
  FROM
    ${ref("stg_bmg_all_waves")}
  UNPIVOT
    (
      -- this uses the responseColumns as defined in /inclusions/retrieve_column_names
    selection_value FOR src_column_name IN (
      ${automaticResponseColumns}
        )
    )
  )
  
SELECT
  survey_response_id,
  unpivoted.src_column_name AS src_question_response_column_name,
  questions_to_response_selection.question_id AS question_id,
  questions_to_response_selection.question_type,
  unpivoted.selection_value,
  questions_to_response_selection.selection_text
FROM
  unpivoted
LEFT JOIN
    ${ref("stg_src_column_to_question_response_selection_value")} questions_to_response_selection
    USING (src_column_name, selection_value)
WHERE
    questions_to_response_selection.question_type IN ('single', 'multi')
