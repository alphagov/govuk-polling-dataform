config {
  type: "operations",
  tags: ["bmg-builder", "dynamic-view"],
  hasOutput: true
}

js {
  const {allSrcColumns} = require('includes/constants');
  const bmgWaveTables = [
    // "src_bmg_wave_1",
    // "src_bmg_wave_2",
    // "src_bmg_wave_3",
    // "src_bmg_wave_4",
    // "src_bmg_wave_5",
    // "src_bmg_wave_6",
    // "src_bmg_wave_7",
    // "src_bmg_wave_8",
    // "src_bmg_wave_9",
    // "src_bmg_wave_10",
    "src_bmg_wave_11",
    "src_bmg_wave_12",
    "src_bmg_wave_13",
    "src_bmg_wave_14",
  ];

  global.tableNamesForSql = bmgWaveTables.map(name => `'${name}'`).join(',');
  allSrcColumns.sort();
  global.allColumnsSqlArray = `[${allSrcColumns.map(col => `'${col}'`).join(', ')}]`;
}

DECLARE ddl_statement STRING;

DECLARE all_columns_array ARRAY<STRING> DEFAULT ${allColumnsSqlArray};

SET ddl_statement = (
  WITH
    table_specific_columns AS (
      SELECT
        table_name,
        ARRAY_AGG(column_name) AS columns_in_this_table
      FROM
        `govuk-polling.govuk_polling_responses.INFORMATION_SCHEMA.COLUMNS`
      WHERE table_name IN (${tableNamesForSql})
      GROUP BY table_name
    ),

       generated_select_statements AS (
      SELECT
        "SELECT\n" ||
        (
          -- This part generates the main list of columns. It will NOT have a trailing comma.
          SELECT
            STRING_AGG(
              "        CAST(" || IF(master_col IN UNNEST(t.columns_in_this_table), master_col, "NULL") || " AS STRING) AS " || master_col, ",\n"
            )
          FROM UNNEST(all_columns_array) AS master_col
        )
        -- ==============================================================================
        -- DEFINITIVE FIX:
        -- Each custom column is now responsible for its own leading comma.
        -- This correctly appends them to the list generated by STRING_AGG.
        -- ==============================================================================
        || ",\n        REPLACE(REGEXP_EXTRACT('" || t.table_name || "', r'wave_\\d+'), '_', ' ') AS wave_name"
        || "\n      FROM `govuk-polling.govuk_polling_responses." || t.table_name || "`"
        AS single_select_statement
      FROM
        table_specific_columns AS t
    )


  SELECT
    "CREATE OR REPLACE VIEW ${self()} AS\n" ||
    (SELECT ARRAY_TO_STRING(ARRAY_AGG(single_select_statement ORDER BY single_select_statement), "\nUNION ALL\n") FROM generated_select_statements)
);

EXECUTE IMMEDIATE ddl_statement;