config {
  type: "operations",
  // Tags help you run specific parts of your project (e.g., `dataform run --tags=bmg-builder`).
  tags: ["bmg-builder", "dynamic-view"],
  hasOutput: true
}

js {

  const {allSrcColumns} = require('includes/constants');
  const bmgWaveTables = [
 // "src_bmg_wave_1",
  //"src_bmg_wave_2",
  //"src_bmg_wave_3",
  //"src_bmg_wave_4",
 // "src_bmg_wave_5",
 // "src_bmg_wave_6",
 // "src_bmg_wave_7",
 // "src_bmg_wave_8",
 // "src_bmg_wave_9",
 // "src_bmg_wave_10",
  "src_bmg_wave_11",
  "src_bmg_wave_12"
];
  global.tableNamesForSql = bmgWaveTables.map(name => `'${name}'`).join(',');

  // Sorting ensures a consistent column order in the final view, which is good practice.
  allSrcColumns.sort();

  // We format the Javascript array into a BigQuery ARRAY<STRING> literal.
  // This string will be injected directly into the SQL script below.
  global.columnsAsBqArray = `[${allSrcColumns.map(col => `'${col}'`).join(', ')}]`;
}

DECLARE ddl_statement STRING;

-- This line uses the JS variable to initialize a BigQuery array.
DECLARE all_columns_array ARRAY<STRING> DEFAULT ${columnsAsBqArray};

SET ddl_statement = (
  WITH
    -- CTE 1: Get columns for ONLY the tables specified in our JS constant.
    table_specific_columns AS (
      SELECT
        table_name,
        ARRAY_AGG(column_name) AS columns_in_this_table
      FROM
        `govuk-polling.govuk_polling_responses.INFORMATION_SCHEMA.COLUMNS`
      -- **MODIFIED LINE**: We now use the precise IN clause instead of a wildcard/regex.
      WHERE table_name IN (${tableNamesForSql})
      GROUP BY table_name
    ),

    -- CTE 2: This logic remains the same. It generates a SELECT for each table found.
    generated_select_statements AS (
      SELECT
        "SELECT\n" ||
        (
          SELECT
            STRING_AGG(
              IF(master_col IN UNNEST(t.columns_in_this_table), "        " || master_col, "        NULL AS " || master_col), ",\n"
            )
          FROM UNNEST(all_columns_array) AS master_col
        )
        || ",\n        '" || t.table_name || "' AS source_table,\n"
        || "        " || REPLACE(t.table_name, 'src_bmg_wave_', '') || " AS wave_number\n"
        || "      FROM `govuk-polling.govuk_polling_responses." || t.table_name || "`"
        AS single_select_statement
      FROM
        table_specific_columns AS t
    )

  -- Final Step: This logic also remains the same.
  SELECT
    "CREATE OR REPLACE VIEW ${self()} AS\n" ||
    (SELECT ARRAY_TO_STRING(ARRAY_AGG(single_select_statement ORDER BY single_select_statement), "\nUNION ALL\n") FROM generated_select_statements)
);

EXECUTE IMMEDIATE ddl_statement;